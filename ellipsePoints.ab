HEADER 
DEFINE PI 3.141592653589793

END HEADER

PROGRAM
DIM prop_length AS DOUBLE
DIM STATE AS DOUBLE 
DIM turbine_height_vec(3) AS DOUBLE
DIM steps AS DOUBLE 
DIM center(3) AS DOUBLE
DIM vec_relto_center(3) AS DOUBLE
DIM translation_vec(3) AS DOUBLE
DIM vertical AS DOUBLE 
DIM horizontal AS DOUBLE 
DIM vel AS DOUBLE
DIM I AS DOUBLE
DIM RST AS DOUBLE 
DIM deg_step AS DOUBLE
DIM feedback_time AS DOUBLE
DIM MEAS_A AS DOUBLE 
DIM MEAS_B AS DOUBLE
DIM DIST_TO_NOSE AS DOUBLE 
DIM RUN_PROG AS DOUBLE 
DIM lost_duration AS DOUBLE
DIM duration_diff AS DOUBLE
DIM turbine_yaw AS DOUBLE
DIM pvt_time AS DOUBLE
DIM chord_length AS DOUBLE
DIM rotational_speed AS DOUBLE
DIM start_time_delay AS DOUBLE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;STATES;;;;;;;;;;;;;;;;;;;;;;;
;;; 0 : STATE_RPM 
;;; 1 : STATE_START 
;;; 2 : STATE_TRACK 
;;; 3 : 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; turbine characteristics ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RST = 1
RUN_PROG = 1
STATE = 0 

blade_length = 0.345 * 0.75
turbine_yaw = 0 
rotational_speed = 11.7
chord_length = 0.103


MEAS_A = -78.1314
MEAS_B = 5.1217
DIST_TO_NOSE = 5.98

deg_step = 1
I = 0

start_time_delay = (((1.6668 * DIST_TO_NOSE + 18.702) / 1000 ) + chord_length / 2) / (blade_length * rotational_speed * PI /30 )
CALL PRINT_DBL(start_time_delay)

'vel = 1/(12 * 6)
'vel = vel * deg_step

MEAS_A = -1 * MEAS_A 

center(0) = DIST_TO_NOSE * COS_DEG(MEAS_B) * SIN_DEG(MEAS_A)
center(1) = DIST_TO_NOSE * COS_DEG(MEAS_B) * COS_DEG(MEAS_A)
center(2) = DIST_TO_NOSE * SIN_DEG(MEAS_B)

'pvt_time = 0.0460
'vel = 2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   end turbine characteristics ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  rpm measurement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DIM duration AS DOUBLE
DIM rpm AS DOUBLE
DIM startMeas AS DOUBLE
DIM endMeas AS DOUBLE
DIM secondPulse AS DOUBLE 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  STATE 0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WHILE (RUN_PROG == 1)
WHILE (STATE == 0)

CALL POLAR2CART(vec_relto_center , blade_length , I , MEAS_A , turbine_yaw)  ;;; RESET TO A READABLE POSITION
CALL VEC_ADD(translation_vec , vec_relto_center , center)	;; RESET TO A READABLE POSITION
vertical = FIND_VERTICAL_ANGLE(translation_vec)				;; RESET TO A READABLE POSITION
horizontal = FIND_HORIZONTAL_ANGLE(translation_vec)	;; RESET TO A READABLE POSITION

MOVEABS A horizontal B vertical								;; RESET TO A READABLE POSITION

''MOVEABS A -79.0517 B 2.2181
DWELL 8

WHILE (endMeas == 0)

IF (startMeas == 0) THEN
	CLEARTIMER
END IF

IF(AIN(B, 1) < .1 && startMeas == 1) THEN
	secondPulse = 1
END IF 

IF (AIN(B, 1) > .4) THEN
	IF(startMeas == 0) THEN 
		startMeas = 1
	END IF 
	
	IF(startMeas == 1 && secondPulse == 1) THEN
		duration = TIMER()
		endMeas = 1
	END IF
END IF
WEND

CALL PRINT_DBL(duration)
CALL CONV_BTIME_TO_RPM (duration)
rpm= CONV_BTIME_TO_RPM (duration)
CALL PRINT_DBL(rpm)
CALL PRINT_DBL (3 * duration / 1000)
STATE = 1
'STATE = 2
WEND
pvt_time = (3 * duration / 1000)/(360/deg_step)
CALL PRINT_DBL (pvt_time)
pvt_time = pvt_time *0.962
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; STATE 1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WHILE (STATE == 1)

;vel = deg_step * duration/(1000 * 120)*.98  - feedback_time

vel = vel - feedback_time

IF vel >= 8 THEN 
	vel = 8
END IF 
 
pvt_time = pvt_time + feedback_time

IF pvt_time <= .03 THEN 
	pvt_time = .03
END IF

WHILE (AIN(B,1) < .2)  
	vel = vel
WEND

STATE = 2

WEND 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  STATE 2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DWELL start_time_delay
I = I + deg_step
VELOCITY ON
WHILE (STATE == 2)

CALL POLAR2CART(vec_relto_center , blade_length , I ,MEAS_A , turbine_yaw) 
CALL VEC_ADD(translation_vec , vec_relto_center , center)
vertical = FIND_VERTICAL_ANGLE(translation_vec)
horizontal = FIND_HORIZONTAL_ANGLE(translation_vec)

ABS

'PVT A horizontal, 0 B vertical, 0 TIME pvt_time
'CW A -79.0517 B 2.2181 I 0 J 2.488 F 1.82
'CW A horizontal B vertical R 2.6 F vel 
LINEAR A horizontal B vertical F 2.90
I = I + deg_step
;WEND 
IF I >= 360 THEN 
	I = 0
END IF 
;CALL PRINT_DBL(vel)
IF AIN(B , 1) < 0.2 THEN
	;STATE = 3
	CLEARTIMER
END IF 
WEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; STATE 3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WHILE STATE == 3
	IF (AIN (B , 1) > 2.5) THEN 
		lost_duration = TIMER()		
		CALL PRINT_DBL(lost_duration)
		IF(lost_duration > duration )   THEN 
			feedback_time = (duration - lost_duration)/duration
		ELSE 
			;feedback_time = 0.001
			feedback_time = .1
		END IF 
		CLEARTIMER
		
		feedback_time = 0
		STATE = 1
	END IF 	
WEND
WEND ;; END OF RUNNING LOOP
END PROGRAM

FUNCTION PRINT_DBL (BYVAL IN AS DOUBLE) AS INTEGER 
	DIM PrintString AS STRING
	FORMAT PrintString, "%f\n", DBLV:IN
    PRINT PrintString
PRINT_DBL = 0 
END FUNCTION 


FUNCTION RAD2DEG (BYVAL IN AS DOUBLE) AS DOUBLE 
	RAD2DEG = 180 * (IN / PI)
END FUNCTION 

FUNCTION DEG2RAD (BYVAL IN AS DOUBLE) AS DOUBLE 
	DEG2RAD = PI / 180 * IN 
END FUNCTION 

FUNCTION COS_DEG (BYVAL IN AS DOUBLE) AS DOUBLE 	
	DIM ANG AS DOUBLE
	ANG = DEG2RAD(IN)
	COS_DEG = COS(ANG)
END FUNCTION 

FUNCTION SIN_DEG (BYVAL IN AS DOUBLE) AS DOUBLE 	
	DIM ANG AS DOUBLE
	ANG = DEG2RAD(IN)
	SIN_DEG = SIN(ANG)
END FUNCTION 

FUNCTION TAN_DEG (BYVAL IN AS DOUBLE) AS DOUBLE 	
	DIM ANG AS DOUBLE
	ANG = DEG2RAD(IN)
	TAN_DEG = TAN(ANG)
END FUNCTION 

FUNCTION VEC_ADD(BYREF RES(3) AS DOUBLE , BYREF IN(3) AS DOUBLE, BYREF IN2(3) AS DOUBLE)
	RES(0) = IN(0) + IN2(0)
	RES(1) = IN(1) + IN2(1)
	RES(2) = IN(2) + IN2(2)
END FUNCTION 

FUNCTION POLAR2CART (BYREF RESULT(3) AS DOUBLE, BYVAL R AS DOUBLE , BYVAL THETA AS DOUBLE ,BYVAL ROT_A , BYVAL YAW AS DOUBLE)
	RESULT(0) =  R * COS_DEG(THETA) * COS_DEG(180 + (ROT_A+YAW))
	RESULT(1) =  R * COS_DEG(THETA) * SIN_DEG(180 + (ROT_A+YAW)) 	
	RESULT(2) = R * SIN_DEG(THETA)
END FUNCTION 

FUNCTION FIND_HORIZONTAL_ANGLE( BYREF IN(3) AS DOUBLE ) AS DOUBLE

DIM xy AS DOUBLE
DIM x AS DOUBLE 
DIM y AS DOUBLE 

x = IN(0)
y = IN(1)

xy = SQR(x^2 + y^2)

   IF(xy != 0) THEN 
   		FIND_HORIZONTAL_ANGLE = -1 * RAD2DEG(ACOS(y / xy)) ;; -1 for reference system
   ELSE 
   		FIND_HORIZONTAL_ANGLE = 0
   END IF 
END FUNCTION 

FUNCTION FIND_VERTICAL_ANGLE( BYREF IN(3) AS DOUBLE ) AS DOUBLE
DIM xy AS DOUBLE
DIM x AS DOUBLE 
DIM y AS DOUBLE 

x = IN(0)
y = IN(1)

xy = SQR(x^2 + y^2)

   IF(IN(2) != 0) THEN 
   		FIND_VERTICAL_ANGLE = RAD2DEG(ATN(IN(2) / xy))
   ELSE 
   		FIND_VERTICAL_ANGLE = 0
   END IF 
END FUNCTION 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	RPM MEASUREMENT 
;	WITH TIMER 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FUNCTION CONV_BTIME_TO_RPM (BYVAL duration AS DOUBLE) AS DOUBLE 
	CONV_BTIME_TO_RPM = 60/ (3 * duration / 1000)
END FUNCTION 